"""
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
"""

#My answer:
class Solution:
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        while len(nums1)>m and nums1[-1]==0:
            nums1.pop()
        if nums2:
            nums1.append(max(nums2)+1)
            if m==0:
                while nums1:
                    nums1.pop()
                nums1.append(max(nums2)+1)
                for i in range(len(nums2)):
                    nums1.insert(i,nums2[i])
                    print(nums1)
            else:
                inserted=0
                L=len(nums1)-1
                for num in nums2:
                    if num<nums1[0]:
                        inserted+=1
                        nums1.insert(0,num)
                    else:
                        for j in range(L+1+inserted):
                            if num>=nums1[L+inserted-j]:
                                nums1.insert(L+inserted-j+1,num)
                                inserted+=1
                                break

            nums1.pop(-1)

#Better answer:
class Solution:
    def merge(self, nums1, m, nums2, n):
        while m > 0 and n > 0:
            if nums1[m-1] >= nums2[n-1]:
                nums1[m+n-1] = nums1[m-1]
                m -= 1
            else:
                nums1[m+n-1] = nums2[n-1]
                n -= 1
        if n > 0:
            nums1[:n] = nums2[:n]